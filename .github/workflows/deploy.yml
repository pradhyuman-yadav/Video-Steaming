# .github/workflows/deploy.yml

name: Deploy Laravel App to EC2

# Controls when the workflow will run
on:
  push:
    branches:
      - main # Trigger deployment ONLY on push to the main branch

jobs:
  build-and-push:
    name: Build & Push Docker Images
    runs-on: ubuntu-latest # Use the latest Ubuntu runner

    steps:
      # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
      - name: Checkout code
        uses: actions/checkout@v4

      # Set up Docker Buildx for multi-platform builds (optional but good practice)
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      # Log in to Docker Hub using secrets
      - name: Log in to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      # Build and push the PHP application image
      - name: Build and push PHP App image
        uses: docker/build-push-action@v5
        with:
          context: . # Use the root of the repo as the build context
          file: ./docker/php/Dockerfile # Path to your PHP Dockerfile
          push: true # Push the image to the registry
          tags: projectdocflix/mediflix:latest
          cache-from: type=gha # Use GitHub Actions cache for faster builds
          cache-to: type=gha,mode=max

      # Build and push the Nginx web server image
      - name: Build and push Nginx image
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ./docker/nginx/Dockerfile # Path to your Nginx Dockerfile
          push: true
          tags: projectdocflix/mediflix-serv:latest 
          cache-from: type=gha
          cache-to: type=gha,mode=max

  deploy:
    name: Deploy to EC2 Instance
    needs: build-and-push # Run this job only after build-and-push is successful
    runs-on: ubuntu-latest

    steps:
      # Checks out the repository code again, primarily to get the docker-compose.yml file
      - name: Checkout code
        uses: actions/checkout@v4

      # Copy the docker-compose.yml file to the EC2 instance
      - name: Copy docker-compose.prod.yml via SCP
        uses: easingthemes/ssh-deploy@v5.1.0 # Using a specific version
        with:
          SSH_PRIVATE_KEY: ${{ secrets.EC2_SSH_KEY }}
          REMOTE_HOST: ${{ secrets.EC2_SSH_HOST }}
          REMOTE_USER: ${{ secrets.EC2_SSH_USER }}
          SOURCE: "docker-compose.prod.yml" # Source file from the repository root
          TARGET: "~/my-laravel-app/docker-compose.yml"   # Target directory on EC2 (ensure this exists!)

      # Connect to EC2 and execute deployment commands
      - name: Execute deployment commands via SSH
        uses: appleboy/ssh-action@v1.0.3 # Using a specific version
        with:
          host: ${{ secrets.EC2_SSH_HOST }}
          username: ${{ secrets.EC2_SSH_USER }}
          key: ${{ secrets.EC2_SSH_KEY }}
          port: 22 # Default SSH port
          script: |
            # Navigate to the deployment directory (which must exist)
            mkdir -p ~/my-laravel-app
            cd ~/my-laravel-app || exit 1

            # docker-compose.yml should have been copied by the previous step

            # Create the production .env file from GitHub Secrets
            echo "--- Creating .env file on EC2 ---"
            echo "APP_NAME=MediFlix" > .env
            echo "APP_ENV=production" >> .env
            echo "APP_KEY=${{ secrets.APP_KEY }}" >> .env
            echo "APP_DEBUG=true" >> .env
            echo "APP_URL=http://${{ secrets.EC2_SSH_HOST }}" >> .env

            echo "LOG_CHANNEL=stack" >> .env
            echo "LOG_DEPRECATIONS_CHANNEL=null" >> .env
            echo "LOG_LEVEL=debug" >> .env

            echo "DB_CONNECTION=mysql" >> .env
            echo "DB_HOST=db" >> .env
            echo "DB_PORT=3306" >> .env
            echo "DB_DATABASE=${{ secrets.DB_DATABASE }}" >> .env
            echo "DB_USERNAME=${{ secrets.DB_USERNAME }}" >> .env
            echo "DB_PASSWORD=${{ secrets.DB_PASSWORD }}" >> .env
            echo "DB_ROOT_PASSWORD=${{ secrets.DB_ROOT_PASSWORD }}" >> .env

            echo "BROADCAST_DRIVER=pusher" >> .env
            echo "CACHE_DRIVER=file" >> .env
            echo "FILESYSTEM_DISK=aws" >> .env
            echo "QUEUE_CONNECTION=sync" >> .env
            echo "SESSION_DRIVER=file" >> .env
            echo "SESSION_LIFETIME=120" >> .env

            echo "MEMCACHED_HOST=127.0.0.1" >> .env

            echo "REDIS_HOST=127.0.0.1" >> .env
            echo "REDIS_PASSWORD=null" >> .env
            echo "REDIS_PORT=6379" >> .env

            echo "MAIL_MAILER=smtp" >> .env
            echo "MAIL_HOST=mailhog" >> .env
            echo "MAIL_PORT=1025" >> .env
            echo "MAIL_USERNAME=null" >> .env
            echo "MAIL_PASSWORD=null" >> .env
            echo "MAIL_ENCRYPTION=null" >> .env
            echo "MAIL_FROM_ADDRESS=hello@example.com" >> .env
            echo "MAIL_FROM_NAME=\${APP_NAME}" >> .env

            echo "STORAGE_DRIVER=public" >> .env

            echo "AWS_ACCESS_KEY_ID=${{ secrets.AWS_ACCESS_KEY_ID }}" >> .env
            echo "AWS_SECRET_ACCESS_KEY=${{ secrets.AWS_SECRET_ACCESS_KEY }}" >> .env
            echo "AWS_DEFAULT_REGION=${{ secrets.AWS_DEFAULT_REGION }}" >> .env
            echo "AWS_BUCKET=${{ secrets.AWS_BUCKET }}" >> .env
            echo "AWS_USE_PATH_STYLE_ENDPOINT=false" >> .env

            echo "PUSHER_APP_ID=" >> .env
            echo "PUSHER_APP_KEY=" >> .env
            echo "PUSHER_APP_SECRET=" >> .env
            echo "PUSHER_APP_CLUSTER=ap1" >> .env

            echo "ZOOM_API_URL=https://api.zoom.us/v2/" >> .env

            echo "BBB_SECURITY_SALT=" >> .env
            echo "BBB_SERVER_BASE_URL=" >> .env

            echo "MIX_PUSHER_APP_KEY=\${PUSHER_APP_KEY}" >> .env
            echo "MIX_PUSHER_APP_CLUSTER=\${PUSHER_APP_CLUSTER}" >> .env

            echo "GOOGLE_LOGIN_STATUS=1" >> .env
            echo "GOOGLE_CLIENT_ID=" >> .env
            echo "GOOGLE_CLIENT_SECRET=" >> .env
            echo "GOOGLE_REDIRECT_URL=" >> .env

            echo "FACEBOOK_LOGIN_STATUS=1" >> .env
            echo "FACEBOOK_CLIENT_ID=" >> .env
            echo "FACEBOOK_CLIENT_SECRET=" >> .env
            echo "FACEBOOK_REDIRECT_URL=" >> .env

            echo "TWITTER_LOGIN_STATUS=1" >> .env
            echo "TWITTER_CLIENT_ID=" >> .env
            echo "TWITTER_CLIENT_SECRET=" >> .env
            echo "TWITTER_REDIRECT_URL=" >> .env

            echo "COOKIE_CONSENT_STATUS=true" >> .env

            echo "VIMEO_CLIENT=" >> .env
            echo "VIMEO_SECRET=" >> .env
            echo "VIMEO_TOKEN_ACCESS=" >> .env
            echo "VIMEO_STATUS=deactivated" >> .env

            echo "PAYPAL_CLIENT_ID=" >> .env
            echo "PAYPAL_SECRET=" >> .env
            echo "PAYPAL_MODE=sandbox" >> .env

            echo "RAZORPAY_KEY=" >> .env
            echo "RAZORPAY_SECRET=" >> .env

            echo "SSLCZ_STORE_ID=" >> .env
            echo "SSLCZ_STORE_PASSWD=" >> .env

            echo "MOLLIE_KEY=" >> .env

            echo "IM_API_KEY=" >> .env
            echo "IM_AUTH_TOKEN=" >> .env
            echo "IM_URL=" >> .env

            echo "PAYSTACK_PUBLIC_KEY=" >> .env
            echo "PAYSTACK_SECRET_KEY=" >> .env
            echo "PAYSTACK_PAYMENT_URL=https://api.paystack.co" >> .env
            echo "MERCHANT_EMAIL=youremail@gmail.com" >> .env

            echo "MERCADO_PAGO_CLIENT_ID=" >> .env
            echo "MERCADO_PAGO_CLIENT_SECRET=" >> .env

            echo "FLW_PUBLIC_KEY=" >> .env
            echo "FLW_SECRET_KEY=" >> .env
            echo "FLW_SECRET_HASH=" >> .env

            echo "APP_DEMO=0" >> .env


            echo "--- Pulling latest Docker images from Docker Hub ---"
            docker-compose pull

            echo "--- Stopping any running containers defined in docker-compose.yml ---"
            docker-compose down --remove-orphans

            echo "--- Starting new containers in detached mode ---"
            docker-compose up -d

            # Wait a few seconds for containers (especially DB) to initialize
            echo "--- Waiting for containers to start... ---"
            sleep 15

            echo "--- Granting DB privileges ---"
            # Extract needed variables from the .env file on the host
            # Use '|| :' to prevent errors if grep finds nothing (e.g., empty password)
            DB_DATABASE=$(grep '^DB_DATABASE=' .env | cut -d '=' -f2) || :
            DB_USERNAME=$(grep '^DB_USERNAME=' .env | cut -d '=' -f2) || :
            DB_PASSWORD=$(grep '^DB_PASSWORD=' .env | cut -d '=' -f2-) || : # Use f2- to capture rest of line for password
            DB_ROOT_PASSWORD=$(grep '^DB_ROOT_PASSWORD=' .env | cut -d '=' -f2-) || : # Use f2- to capture rest of line for password

            # Construct the MySQL commands using NOWDOC to handle quotes/special chars
            MYSQL_COMMAND=$(cat <<-SQL
            CREATE USER IF NOT EXISTS '${DB_USERNAME}'@'%' IDENTIFIED BY '${DB_PASSWORD}';
            GRANT ALL PRIVILEGES ON \`${DB_DATABASE}\`.* TO '${DB_USERNAME}'@'%';
            FLUSH PRIVILEGES;
            SQL
            )
            # Execute the command inside the db container
            docker-compose exec -T db mysql -u root -p"${DB_ROOT_PASSWORD}" -e "$MYSQL_COMMAND" || echo "DB Grant/Create User failed (INFO: Might be okay if user already exists with correct grants)"

            echo "--- Running database migrations ---"
            # Use -T to avoid TTY allocation issues in non-interactive shells
            docker-compose exec -T app php artisan migrate --force || echo "Migration failed or no migrations to run."

            echo "--- Optimizing Laravel Application ---"
            docker-compose exec -T app php artisan optimize:clear
            docker-compose exec -T app php artisan config:cache
            docker-compose exec -T app php artisan route:cache
            docker-compose exec -T app php artisan view:cache

            # Optional: Clean up old dangling Docker images (use with caution)
            # echo "--- Pruning old Docker images ---"
            # docker image prune -af

            echo "--- Deployment finished successfully! ---"
      - name: Display URL in GitHub Actions Summary
        run: |
          echo "### ✅ Deployment Completed" >> $GITHUB_STEP_SUMMARY
          echo "Your app is live at: [http://${{ secrets.EC2_SSH_HOST }}](http://${{ secrets.EC2_SSH_HOST }})" >> $GITHUB_STEP_SUMMARY
