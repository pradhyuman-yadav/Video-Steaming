deploy:
  name: Deploy to EC2 Instance
  needs: build-and-push # Run only after build-and-push is successful
  runs-on: ubuntu-latest

  steps:
    - name: Checkout code # Needed to get docker-compose.yml
      uses: actions/checkout@v4

    - name: Copy docker-compose.yml via SCP # <<< NEW STEP
      uses: easingthemes/ssh-deploy@v5.2.0 # Or use a specific version like v5.0.0
      with:
        SSH_PRIVATE_KEY: ${{ secrets.EC2_SSH_KEY }}
        REMOTE_HOST: ${{ secrets.EC2_SSH_HOST }}
        REMOTE_USER: ${{ secrets.EC2_SSH_USER }}
        SOURCE: "docker-compose.yml" # Source file in the repo workspace
        TARGET: "~/my-laravel-app"   # Target directory on EC2

    - name: Execute deployment commands via SSH # <<< MODIFIED STEP
      uses: appleboy/ssh-action@v1.0.3
      with:
        host: ${{ secrets.EC2_SSH_HOST }}
        username: ${{ secrets.EC2_SSH_USER }}
        key: ${{ secrets.EC2_SSH_KEY }}
        port: 22
        script: |
          # Navigate to the deployment directory
          cd ~/my-laravel-app || exit 1

          # docker-compose.yml should already be here now via the previous step
          # REMOVED: cp ${{ github.workspace }}/docker-compose.yml . 

          # Create the production .env file from secrets
          echo "--- Creating .env file on EC2 ---"
          echo "APP_NAME=Laravel" > .env
          echo "APP_ENV=production" >> .env
          echo "APP_KEY=${{ secrets.APP_KEY }}" >> .env
          echo "APP_DEBUG=false" >> .env
          echo "APP_URL=http://${{ secrets.EC2_SSH_HOST }}" >> .env # Use your actual domain if you have one

          echo "LOG_CHANNEL=stack" >> .env
          echo "LOG_LEVEL=error" >> .env

          echo "DB_CONNECTION=mysql" >> .env
          echo "DB_HOST=db" >> .env # Docker Compose service name
          echo "DB_PORT=3306" >> .env
          echo "DB_DATABASE=${{ secrets.DB_DATABASE }}" >> .env
          echo "DB_USERNAME=${{ secrets.DB_USERNAME }}" >> .env
          echo "DB_PASSWORD=${{ secrets.DB_PASSWORD }}" >> .env

          # --- Add all other variables your app needs ---

          echo "--- Pulling latest images ---"
          docker-compose pull

          echo "--- Stopping any old containers ---"
          docker-compose down --remove-orphans

          echo "--- Starting new containers ---"
          docker-compose up -d

          echo "--- Running database migrations ---"
          # Use -T to avoid issues with TTY allocation in non-interactive shells
          docker-compose exec -T app php artisan migrate --force || echo "Migration failed or no migrations to run."

          echo "--- Optimizing Laravel ---"
          docker-compose exec -T app php artisan optimize:clear
          docker-compose exec -T app php artisan config:cache
          docker-compose exec -T app php artisan route:cache
          docker-compose exec -T app php artisan view:cache

          echo "--- Deployment finished successfully! ---"